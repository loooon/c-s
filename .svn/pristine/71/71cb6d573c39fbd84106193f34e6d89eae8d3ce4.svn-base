package com.credit.web.controller.open.blackbox;

import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import com.credit.common.result.ResultJson;
import com.credit.web.controller.AbstractBaseController;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.io.Charsets;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.credit.common.exception.ServiceException;
import com.credit.web.controller.open.blackbox.bean.CallDetail;
import com.google.common.collect.Lists;

/**
 * Created by wangjunling on 2017/3/8.
 */

@Controller
public class GrayscaleController extends AbstractBaseController
{

    private Logger logger = LoggerFactory.getLogger(GrayscaleController.class);

    @RequestMapping(value = "/service", method = RequestMethod.POST, params = "t=grayscale")
    // params多个参数params={"t=1","c=2"}
    @ResponseBody
    public ResultJson service(String phone, String name, String idcard, String imei, String sim,
            @RequestParam(name = "apply_date",required = false) String applyDate,
            @RequestParam(name = "call_details",required = false) String callDetails, HttpServletRequest request)
    {
        try
        {
            List<CallDetail> callDetailList = Lists.newArrayList();
            if (StringUtils.isBlank(callDetails))
            {
				readFile(callDetailList, request);
            }
            else
            {
                List<JSONObject> jsonObjectList = JSONArray.parseArray(callDetails, JSONObject.class);
                for (JSONObject jsonObject : jsonObjectList)
                {
                    callDetailList.add(CallDetail.toEntity(jsonObject));
                }
            }

            if (checkParam(phone, applyDate, callDetailList))
            {
                return new ResultJson().paramError();
            }

            // todo

            return new ResultJson().success();
        }
        catch (ServiceException e)
        {
            logger.error("染黑度接口调用异常", e);
            return new ResultJson().error();
        }

    }

    private boolean checkParam(String phone, String applyDate, List<CallDetail> callDetailList)
    {
        return StringUtils.isBlank(phone) || StringUtils.isBlank(applyDate) || CollectionUtils.isEmpty(callDetailList);
    }

    private void readFile(List<CallDetail> callDetailList, HttpServletRequest request) throws ServiceException
    {
        CommonsMultipartResolver commonsMultipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());
        commonsMultipartResolver.setDefaultEncoding("utf-8");
        if (commonsMultipartResolver.isMultipart(request))
        {
            MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
            try
            {
                Iterator<String> fileNames = multiRequest.getFileNames();
                while (fileNames.hasNext())
                {
                    String filename = fileNames.next();
                    MultipartFile file = multiRequest.getFile(filename);
                    List<String> stringList = IOUtils.readLines(file.getInputStream(), Charsets.UTF_8);
                    for (String line : stringList)
                    {
                        String[] strings = line.split("\t");
                        if (strings.length > 6)
                        {
                            callDetailList.add(CallDetail.toEntity(strings));
                        }
                    }
                }
            }
            catch (Exception e)
            {
                logger.error("读取文件异常", e);
                throw new ServiceException("读取详单文件异常");
            }
        }
    }

}
