package com.credit.web.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.json.JsonArray;
import javax.servlet.http.HttpServletRequest;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.credit.common.util.RandomUtil;
import com.credit.common.web.session.UserSession;
import com.credit.common.web.session.UserSessionFactory;
import com.credit.entity.UserCallDetailsHistory;
import com.credit.service.UserCallDetailsService;
import com.credit.web.model.ContactCheck;
import com.google.common.collect.Maps;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import com.credit.common.util.NumberFormat;
import com.credit.common.util.time.TimeUtil;
import com.credit.entity.Applicant;
import com.credit.entity.PhoneSegmentInfo;
import com.credit.service.PhoneSegmentInfoService;
import com.credit.web.model.ContactCheckModel;
import com.credit.web.model.GrayscaleModel;
import com.credit.web.util.CallDetailUtil;
import com.credit.web.util.GrayscaleUtil;

/**
 * Created by wangjunling on 2017/3/8.
 */

@Controller
@RequestMapping("/grayscale")
public class GrayscaleController extends AbstractBaseController
{
    @Autowired
    private UserCallDetailsService<UserCallDetailsHistory> userCallDetailsService;

    private Logger logger = LoggerFactory.getLogger(GrayscaleController.class);

    @RequestMapping(value = "/report", method = RequestMethod.POST)
    public String service(String phone, String name, String idcard, String applyDateStr,
            @RequestParam(defaultValue = "utf-8") String fileCharset, ContactCheckModel contactCheckModel,
            HttpServletRequest request, Model model, RedirectAttributes attributes,String uuid)
    {
        String REDIRECT_VIEW = "redirect:/search/personal";
        Applicant applicant = new Applicant();
        UserCallDetailsHistory userCallDetailsHistory = null;
        if (StringUtils.isNoneEmpty(uuid))
        {
            userCallDetailsHistory = userCallDetailsService.searchOneUserCallDetail(uuid);
            if (userCallDetailsHistory != null)
            {
                try
                {
                    String tagPhoneNumber = NumberFormat.formatNumber(userCallDetailsHistory.getPhone());
                    if (!NumberFormat.isPhoneNumber(tagPhoneNumber))
                    {
                        logger.debug("输入申请人电话号码:" + phone + ",转换后的号码" + tagPhoneNumber);
                        attributes.addFlashAttribute("errorMsg", "申请人电话号码[" + phone + "]不正确");
                        return REDIRECT_VIEW;
                    }
                    applicant.setPhone(tagPhoneNumber);
                    String applyDateStr1 = userCallDetailsHistory.getApplyDate();
                    if (StringUtils.isNotBlank(applyDateStr1))
                    {
                        Date applyDate = TimeUtil.parse(applyDateStr1, "yyyy-MM-dd");
                        if (applyDate == null)
                        {
                            attributes.addFlashAttribute("errorMsg", "申请时间[" + applyDateStr + "]格式不正确");
                            return REDIRECT_VIEW;
                        }
                        applicant.setApplyDate(applyDate);
                    }
                    applicant.setIdcard(userCallDetailsHistory.getIdcard());
                    applicant.setAname(userCallDetailsHistory.getSearchUser());
                } catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        }else
            {
                if (StringUtils.isBlank(phone))
                {
                    attributes.addFlashAttribute("errorMsg", "手机号码为空");
                    return REDIRECT_VIEW;
                }

                try
                {
                    String tagPhoneNumber = NumberFormat.formatNumber(phone);
                    if (!NumberFormat.isPhoneNumber(tagPhoneNumber))
                    {
                        logger.debug("输入申请人电话号码:" + phone + ",转换后的号码" + tagPhoneNumber);
                        attributes.addFlashAttribute("errorMsg", "申请人电话号码[" + phone + "]不正确");
                        return REDIRECT_VIEW;
                    }
                    applicant.setPhone(tagPhoneNumber);
                }
                catch (Exception e)
                {
                    logger.warn("申请人电话号码[" + applicant.getPhone() + "]不正确:", e);
                    attributes.addFlashAttribute("errorMsg", "申请人电话号码[" + applicant.getPhone() + "]不正确");
                    return REDIRECT_VIEW;
                }
                if (StringUtils.isNotBlank(applyDateStr))
                {
                    try
                    {
                        attributes.addFlashAttribute("errorMsg", "错误信息");
                        Date applyDate = TimeUtil.parse(applyDateStr, "yyyy-MM-dd");
                        if (applyDate == null)
                        {
                            attributes.addFlashAttribute("errorMsg", "申请时间[" + applyDateStr + "]格式不正确");
                            return REDIRECT_VIEW;
                        }
                        applicant.setApplyDate(applyDate);
                    }
                    catch (Exception e)
                    {
                        logger.warn("申请时间[" + applyDateStr + "]格式不正确");
                        attributes.addFlashAttribute("errorMsg", "申请时间[" + applyDateStr + "]格式不正确");
                        return REDIRECT_VIEW;
                    }
                }

                applicant.setIdcard(idcard);
                applicant.setAname(name);
            }

        List<String> errMsgList;
        long s =System.currentTimeMillis();
        long end = System.currentTimeMillis();
        System.out.println("#########################");
        System.out.println(end-s);
        System.out.println("#########################");
        String detailPath = "";
        String fileMd5Digest = "";
        List<UserCallDetailsHistory> histories=null;
        if (userCallDetailsHistory!=null)
        {
            detailPath = userCallDetailsHistory.getCallDetailsPath();
            fileMd5Digest = userCallDetailsHistory.getFileMd5Digest();
        }else
            {
                histories = userCallDetailsService.seachAll();
            }

        try
        {
            String fileP = "";
            String fileM = "";
            Map<String,Object> objectMap = CallDetailUtil.readCallDetailFile(applicant, fileCharset, request,detailPath,fileMd5Digest,histories);
            errMsgList = (List<String>) objectMap.get("errMsgList");
            Map<String,Object> paramsMap = (Map<String, Object>) objectMap.get("params");
            fileP = (String) paramsMap.get("filePath");
            fileM = (String) paramsMap.get("fileMd5Digest");
            UserCallDetailsHistory userCallDetailsHistory1 = new UserCallDetailsHistory();
            userCallDetailsHistory1.setUuid(UUID.randomUUID().toString());
            if (userCallDetailsHistory == null)
            {
                UserSession userSession = UserSessionFactory.getUserSession(request);
                Integer userId = userSession.getUserId();
                String userName = userSession.getUserName();
                userCallDetailsHistory1.setUserId(userId);
                userCallDetailsHistory1.setName(userName);
                userCallDetailsHistory1.setSearchUser(name);
                userCallDetailsHistory1.setPhone(phone);
                userCallDetailsHistory1.setApplyDate(applyDateStr);
                userCallDetailsHistory1.setIdcard(idcard);
                userCallDetailsHistory1.setCallDetailsPath(fileP);
                userCallDetailsHistory1.setFileMd5Digest(fileM);
                userCallDetailsHistory1.setCreateDate(new Date());
                if (contactCheckModel != null)
                {
                    List<ContactCheck> contactChecks = contactCheckModel.getContactChecks();
                    userCallDetailsHistory1.setContactChecks(JSON.toJSONString(contactChecks));
                }
                userCallDetailsService.saveUserCallDetailHistory(userCallDetailsHistory1);
            }else
                {
                    /*userCallDetailsHistory1.setUserId(userCallDetailsHistory.getUserId());
                    userCallDetailsHistory1.setName(userCallDetailsHistory.getName());
                    userCallDetailsHistory1.setPhone(userCallDetailsHistory.getPhone());
                    userCallDetailsHistory1.setApplyDate(userCallDetailsHistory.getApplyDate());
                    userCallDetailsHistory1.setIdcard(userCallDetailsHistory.getIdcard());
                    userCallDetailsHistory1.setCallDetailsPath(userCallDetailsHistory.getCallDetailsPath());
                    userCallDetailsHistory1.setFileMd5Digest(userCallDetailsHistory.getFileMd5Digest());
                    userCallDetailsHistory1.setCreateDate(new Date());
                    userCallDetailsHistory1.setContactChecks(userCallDetailsHistory.getContactChecks());*/
                }

        }
        catch (Exception e)
        {
            logger.error("读取详单文件异常", e);
            attributes.addFlashAttribute("errorMsg", "读取详单文件异常");
            return REDIRECT_VIEW;
        }

        if (CollectionUtils.isEmpty(applicant.getCallDetailsList()))
        {
            if (CollectionUtils.isEmpty(errMsgList))
            {
                attributes.addFlashAttribute("errorMsg", "申请人详单内容为空");
                return REDIRECT_VIEW;
            }
            attributes.addFlashAttribute("errMsgList", errMsgList);
            return REDIRECT_VIEW;
        }

        GrayscaleModel grayscaleModel = new GrayscaleModel();
        if (userCallDetailsHistory != null)
        {
            String contactChecks = userCallDetailsHistory.getContactChecks();
            List<ContactCheck> contactCheckList = JSON.parseArray(contactChecks, ContactCheck.class);
            grayscaleModel.setContactCheck(contactCheckList);
        }else
            {
                grayscaleModel.setContactCheck(contactCheckModel.getContactChecks());
            }
        try
        {
            GrayscaleUtil.buildGrayscaleModel(grayscaleModel, applicant);
        }
        catch (Exception e)
        {
            logger.error("详单统计错误", e);
            attributes.addFlashAttribute("errorMsg", e.getMessage());
            return REDIRECT_VIEW;
        }
        Date currentDate = new Date();
        String serialNumber = TimeUtil.format(currentDate,"yyyyMMddhhmmss");
        String reportTime = TimeUtil.format(currentDate, "yyyy-MM-dd");
        serialNumber += RandomUtil.genRandomNumberString(3);


        model.addAttribute("serialNumber",serialNumber);
        model.addAttribute("reportTime",reportTime);
        model.addAttribute("grayscaleModel", grayscaleModel);

        return "user/search/report";

    }
}
