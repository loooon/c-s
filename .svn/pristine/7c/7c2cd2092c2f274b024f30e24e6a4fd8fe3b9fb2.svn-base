package com.credit.web.controller.open.blackbox;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import com.credit.common.exception.ServiceException;
import com.credit.service.cache.UserInfoCache;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.alibaba.fastjson.JSON;
import com.credit.common.result.ResultJson;
import com.credit.common.util.http.HttpUtil;
import com.credit.entity.User;
import com.credit.service.UserService;
import com.credit.web.controller.AbstractBaseController;

/**
 * Created by wangjunling on 2017/3/15.
 */
@Controller
public class UploadTextController extends AbstractBaseController
{

    @Value("${sms.upload.total}")
    private Integer smsUploadTotal;

    @Value("${sms.upload.url}")
    private String smsUploadParseUrl;

    @Value("${interface.usage.limit.switch}")
    private Integer interfaceUsageLimitSwitch;

    @Autowired
    private UserService<User> userService;

    @RequestMapping(value = "/service", method = RequestMethod.POST, params = "t=upload_text")
    @ResponseBody
    public ResultJson uploadSms(String vkey, HttpServletRequest request)
    {
        // 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession()
                .getServletContext());
        multipartResolver.setDefaultEncoding("utf-8");
        MultipartFile multipartFile;
        // 检查form中是否有enctype="multipart/form-data"
        if (!multipartResolver.isMultipart(request))
        {
            return new ResultJson().paramError("上传的文本文件为空");
        }
        // 将request变成多部分request
        MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
        // 获取multiRequest 中所有的文件名
        multipartFile = multiRequest.getFile("text");
        if (multipartFile == null)
        {
            return new ResultJson().paramError("上传的文本文件为空");
        }

        String realPath = "/blackbox/files/text_files/";
        File file = new File(realPath + UUID.randomUUID() + multipartFile.getOriginalFilename());
        logger.debug("文件暂存位置：{}", file.getAbsolutePath());
        try
        {
            multipartFile.transferTo(file);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        Map<String, File> fileMap = new HashMap<>(1);
        fileMap.put("text", file);
        String result;
        try
        {
            result = HttpUtil.postReq(smsUploadParseUrl, null, fileMap);
        }
        catch (Exception e)
        {
            logger.error("请求结果异常", e);
            return new ResultJson().error();
        }
        finally
        {
            file.delete();
        }
        if(StringUtils.isBlank(result))
        {
        	return new ResultJson().error("上传异常");
		}
        ResultJson resultJson;
        try
        {
            resultJson = JSON.parseObject(result, ResultJson.class);
        }
        catch (Exception e)
        {
			logger.error("解析内容：{}，结果异常{}", result, e);
			return new ResultJson().error("解析返回结果异常");
        }
        return resultJson;
    }
}
