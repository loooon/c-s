package com.credit.service.cache;

import java.util.List;
import java.util.concurrent.TimeUnit;

import com.credit.common.context.BeanFactory;
import com.credit.service.impl.NumberTagServiceImpl;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.spi.ErrorCode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.credit.common.cache.AbstractCache;
import com.credit.common.cache.CacheFactory;
import com.credit.common.exception.ServiceException;
import com.credit.common.util.security.DigestUtils;
import com.credit.entity.NumberTag;
import com.credit.service.NumberTagService;

/**
 * Created by Michael Chan on 3/9/2017.
 */
public class NumberTagCache
{
    private static final Logger logger = LoggerFactory.getLogger(NumberTagCache.class);

    private static final String NUMBER_TAG_SERVICE_NAME = "numberTagService";


    private NumberTagService<NumberTag> numberTagService;

    private AbstractCache<String, NumberTag> cache;

    private NumberTagCache()
    {
        try
        {
			numberTagService = BeanFactory.getBean(NUMBER_TAG_SERVICE_NAME, NumberTagServiceImpl.class);
        }
        catch (Exception e)
        {
            numberTagService = null;
            logger.error("初始化号码标签信息失败!", e);
        }

        try
        {
            cache = CacheFactory.getInstance().newCache(30, TimeUnit.DAYS, 100000);
        }
        catch (Exception e)
        {
            cache = null;
            logger.error("初始化号码标签信息失败!", e);
        }
    }

    private static class NumberTagHolder
    {
        private static final NumberTagCache instance = new NumberTagCache();
    }

    public static NumberTagCache getInstance()
    {
        return NumberTagCache.NumberTagHolder.instance;
    }

    public void reloadAll() throws ServiceException
    {

        if (null == numberTagService)
        {
            logger.error("初始化号码标签信息失败!");
            return;
        }

        List<NumberTag> numberTags = numberTagService.searchAll();

        reloadAll(numberTags);
    }
	public void reloadAll(List<NumberTag> numberTagList) throws ServiceException
	{
		try
		{
			cache.invalidAllCache();

			if (null != numberTagList)
			{
				for (NumberTag numberTag : numberTagList)
				{
					if (numberTag.getNumber() != null)
					{
						cache.cache(numberTag.getNumber(), numberTag);
					}
				}
			}
		}
		catch (Exception e)
		{
			throw new ServiceException(ErrorCode.FLUSH_FAILURE, "重新加载号码标签信息失败", e);
		}
	}

	public NumberTag getNumberTagCacheData(String contact) throws ServiceException
	{
		if(StringUtils.isBlank(contact))
		{
			return null;
		}
		try
		{
			if (cache.size() == 0)
			{
				reloadAll();
			}
			String s = DigestUtils.md5(("95527434289645878037" + contact).getBytes());
			return cache.get(s);
		}
		catch (Exception e)
		{
			throw new ServiceException(ErrorCode.FLUSH_FAILURE, "从缓存中加载号码标签信息失败", e);
		}
	}
}
