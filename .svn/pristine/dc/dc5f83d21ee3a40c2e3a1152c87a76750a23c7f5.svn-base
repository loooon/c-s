package com.credit.web.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import com.credit.common.web.session.UserSessionFactory;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.credit.common.result.ResultJson;
import com.credit.common.util.RandomUtil;
import com.credit.common.util.security.DigestUtils;
import com.credit.entity.User;
import com.credit.service.EmailService;
import com.credit.service.UserService;
import com.credit.web.model.UserLogin;

/**
 * Created by Michael Chan on 3/8/2017.
 */
@Controller
public class LoginController extends AbstractBaseController
{
    @Autowired
    UserService userService;

    @Autowired
    EmailService emailService;

    @RequestMapping(value = "/login", method = RequestMethod.GET)
    public String signIn()
    {
        return "login";
    }

    @RequestMapping("/logout")
    public String signOut(HttpSession httpSession)
    {
		UserSessionFactory.clearUserSession(httpSession);
        return "redirect:login";
    }

    @RequestMapping(value = "/login", method = RequestMethod.POST)
    @ResponseBody
    public ResultJson ajaxLogin(@Valid UserLogin userReg, BindingResult bindingResult, HttpServletRequest request)
    {
        if (bindingResult.hasErrors())
        {
            return new ResultJson().error(ResultJson.STATUS_CODE_PARAM_ERROR, "登陆信息不完整");
        }
        try
        {
            User user = userService.searchUserByName(userReg.getName());
            if (user == null)
            {
                return new ResultJson().paramError("找不到对应的用户！");
            }
            String passwordRecord = user.getPassword();
            // 重新计算摘要
            String originalPassword = userReg.getPassword();
            String md5Password = DigestUtils.md5(DigestUtils.md5(originalPassword.getBytes("UTF-8")).getBytes("UTF-8"));
            if (!md5Password.equals(passwordRecord))
            {
                return new ResultJson().error(ResultJson.STATUS_CODE_FAIL, "您输入的密码错误！");
            }
            setUserSession(user, request);
            return new ResultJson().success();
        }
        catch (Exception e)
        {
            logger.error("登陆异常", e);
            return new ResultJson().error(ResultJson.STATUS_CODE_EXCEPTION, "登陆异常");
        }
    }

    @RequestMapping(value = "/password", method = RequestMethod.POST)
    @ResponseBody
    public ResultJson findPassword(String userName)
    {
        if(StringUtils.isEmpty(userName))
        {
            return new ResultJson().error(ResultJson.STATUS_CODE_PARAM_ERROR, "请输入用户名");
        }
        try
        {
            User user = userService.searchUserByName(userName);
            if (user == null)
            {
                return new ResultJson().paramError("找不到对应的用户！");
            }
            String newPassword = RandomUtil.genRandomString(6);
            String md5Password = DigestUtils.md5(DigestUtils.md5(newPassword.getBytes("UTF-8")).getBytes("UTF-8"));
            user.setPassword(md5Password);
            userService.save(user);
            //发送邮件找回密码
            emailService.findPassword(newPassword);
            return new ResultJson().success(user,"密码已发送到您的邮箱中："+userName);
        }
        catch (Exception e)
        {
            logger.error("找回密码异常", e);
            return new ResultJson().error(ResultJson.STATUS_CODE_EXCEPTION, "找回密码异常");
        }
    }
}
