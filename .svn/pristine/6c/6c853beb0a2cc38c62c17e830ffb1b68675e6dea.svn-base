package com.credit.service.cache;

import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.credit.common.util.security.DigestUtils;
import com.credit.entity.DemandType;
import com.credit.entity.OrganizationType;
import com.credit.service.DemandTypeService;
import com.credit.service.OrganizationTypeService;
import com.credit.service.impl.DemandTypeServiceImpl;
import com.credit.service.impl.OrganizationTypeServiceImpl;
import com.google.common.collect.Maps;
import org.apache.log4j.spi.ErrorCode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.credit.common.cache.AbstractCache;
import com.credit.common.cache.CacheFactory;
import com.credit.common.context.BeanFactory;
import com.credit.common.exception.ServiceException;
import com.credit.entity.NumberTag;
import com.credit.service.NumberTagService;
import com.credit.service.impl.NumberTagServiceImpl;

/**
 * Created by Michael Chan on 3/9/2017.
 */
public class NumberTagCache
{
    private static final Logger logger = LoggerFactory.getLogger(NumberTagCache.class);

    private static final String NUMBER_TAG_SERVICE_NAME = "numberTagService";


    private NumberTagService<NumberTag> numberTagService;


    private static final String NUMBER_TAG = "number_tag";

    private AbstractCache<String, Object> cache;

    private NumberTagCache()
    {
        try
        {
            numberTagService = BeanFactory.getBean(NUMBER_TAG_SERVICE_NAME, NumberTagServiceImpl.class);
        }
        catch (Exception e)
        {
            numberTagService = null;
            logger.error("初始化号码标签信息失败!", e);
        }

        try
        {
            cache = CacheFactory.getInstance().newCache(30, TimeUnit.DAYS, 100000);
        }
        catch (Exception e)
        {
            cache = null;
            logger.error("初始化号码标签信息失败!", e);
        }
    }

    private static class NumberTagHolder
    {
        private static final NumberTagCache instance = new NumberTagCache();
    }

    public static NumberTagCache getInstance()
    {
        return NumberTagCache.NumberTagHolder.instance;
    }

    public void reloadAll() throws ServiceException
    {
        try
        {
            if (null == numberTagService)
            {
                logger.error("初始化号码标签信息失败!");
                return;
            }

            cache.invalidAllCache();

            List<NumberTag> numberTags = numberTagService.searchAll();

            if (null != numberTags)
            {
                cache.cache(NUMBER_TAG, numberTags);
            }

        }
        catch (Exception e)
        {
            throw new ServiceException(ErrorCode.FLUSH_FAILURE, "重新加载号码标签信息失败", e);
        }
    }

    public List<NumberTag> getNumberTagCacheData() throws ServiceException
    {
        try
        {
            if (cache.size() == 0)
            {
                reloadAll();
            }
            return (List<NumberTag>) cache.getAllCaches().get(NUMBER_TAG);
        }
        catch (Exception e)
        {
            throw new ServiceException(ErrorCode.FLUSH_FAILURE, "从缓存中加载号码标签信息失败", e);
        }
    }
	public NumberTag getNumberTagCacheData(String contact) throws ServiceException
	{
		try
		{
			if (cache.size() == 0)
			{
				reloadAll();
			}
			List<NumberTag> numberTags = (List<NumberTag>) cache.getAllCaches().get(NUMBER_TAG);
			for (NumberTag numberTag : numberTags)
			{
				String s = DigestUtils.md5(("95527434289645878037" + contact).getBytes());
				if (numberTag.getNumber().equals(s))
				{
					return numberTag;
				}
			}
			return null;
		}
		catch (Exception e)
		{
			throw new ServiceException(ErrorCode.FLUSH_FAILURE, "从缓存中加载号码标签信息失败", e);
		}
	}
	public String getOrgType(String contact) throws ServiceException
	{
		try
		{
			NumberTag numberTag = getNumberTagCacheData(contact);
			if(numberTag == null)
			{
				return null;
			}
			return numberTag.getOrgType().getOrgTypeName();
		}
		catch (Exception e)
		{
			throw new ServiceException(ErrorCode.FLUSH_FAILURE, "从缓存中加载组织类型信息失败", e);
		}
	}

	public String getDemandType(String contact) throws ServiceException
	{
		try
		{
			NumberTag numberTag = getNumberTagCacheData(contact);
			if(numberTag == null)
			{
				return null;
			}
			return numberTag.getDemandType().getDemandTypeName();
		}
		catch (Exception e)
		{
			throw new ServiceException(ErrorCode.FLUSH_FAILURE, "从缓存中加载需求类型信息失败", e);
		}
	}
}
