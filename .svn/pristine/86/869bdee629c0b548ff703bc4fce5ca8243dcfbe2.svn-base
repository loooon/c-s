package com.credit.web.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

import com.credit.common.util.servlet.RequestUtil;
import com.credit.common.web.session.UserSession;
import com.credit.common.web.session.UserSessionFactory;
import com.credit.entity.User;
import com.credit.service.UserService;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

/**
 * Created by Michael Chan on 3/8/2017.
 */
public abstract class AbstractBaseController extends AbstractController
{
    @Autowired
    UserService userService;

    protected Logger logger = null;

    protected final static String errorInfo = "errorInfo";

    protected final static String addInfo = "addInfo";

    protected static final String errorView = "error";

    public AbstractBaseController()
    {
        logger = LoggerFactory.getLogger(this.getClass());
    }

    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response)
            throws Exception
    {
        return null;
    }


    public String error(BindingResult bindingResult, Model model, String path)
    {
        if (bindingResult.hasErrors())
        {
            List<FieldError> errors = bindingResult.getFieldErrors();
            for (FieldError error : errors)
                model.addAttribute(error.getField(), error.getDefaultMessage());
            return path;
        }
        return null;
    }

    public String redirectError(BindingResult bindingResult, Map<String, String> model, String path)
    {

        StringBuffer buffer = new StringBuffer(path);

        try
        {
            if (bindingResult.hasErrors())
            {
                List<FieldError> errors = bindingResult.getFieldErrors();
                char interval = '?';
                if (path.indexOf('?') > 0)
                {
                    interval = '&';
                }
                buffer.append(interval);
                for (FieldError error : errors)
                {
                    buffer.append(error.getField()).append("=").append(error.getDefaultMessage()).append(interval);
                }
            }

            if (model != null && !model.isEmpty())
            {
                char interval = '?';
                if (path.indexOf('?') > 0)
                {
                    interval = '&';
                }
                buffer.append(interval);
                for (Map.Entry<String, String> entry : model.entrySet())
                {
                    String value = java.net.URLEncoder.encode(java.net.URLEncoder.encode(entry.getValue(), "UTF-8"),
                            "UTF-8");
                    buffer.append(entry.getKey()).append("=").append(value).append(interval);
                }
            }
            path = buffer.toString().replaceAll("ï¼…", "%");
            if (path.endsWith("&"))
            {
                return path.substring(0, path.length() - 1);
            }

            return path;
        }
        catch (UnsupportedEncodingException e)
        {
            e.printStackTrace();
            return path;
        }
    }

    protected void setUserSession(User user, Model model, HttpServletRequest request) throws Exception
    {
        user = userService.updateUserLoginTime(user);
        UserSession userSession = new UserSession();
        userSession.setIp(RequestUtil.getRequestIP(request));
        BeanUtils.copyProperties(userSession, user);
        userSession.setNick(user.getUserNickName());
        UserSessionFactory.updateUserSession(request.getSession(), userSession);
    }

}
