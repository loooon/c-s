package com.credit.common.cfg.store;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

import com.credit.common.cfg.ConfigObj;
import com.credit.common.util.file.IniFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



/**
 * Ini文件形式的Config store 
 * 
 * <p> Session名是类名，如[SysCfg]，session中的每项是该类的公开、非静态、非final属性
 * 
 * @author xuji
 * @version 1.0
 * @see {@link utn.cfg.ConfigObj ConfigObj}
 * @since 1.0
 */
abstract public class IniFileConfigStore implements IConfigStore
{
    private static Logger logger = LoggerFactory.getLogger(IniFileConfigStore.class);

    protected IniFile m_ini;

    protected IniFileConfigStore(String path)
    {
        m_ini = new IniFile(path);
    }

    public void getFromStore(ConfigObj cfgObj)
    {
        if (cfgObj == null)
            return;

        String cfgName = getCfgSessionName(cfgObj);
        Field[] fields = cfgObj.getClass().getFields();

        if (!hasIniData(cfgName))
            return;

        try
        {
            for (int i = 0; i < fields.length; i++)
            {
                Field field = fields[i];
                int mod = field.getModifiers();
                if ((!Modifier.isPublic(mod)) || Modifier.isFinal(mod) || Modifier.isStatic(mod))
                    continue;

                String key = field.getName();
                String value = m_ini.getStringProperty(cfgName, key);

                if (cfgObj.needEncrypt(field.getName()))
                {
                    value = decryptString(value);
                }

                ConfigObj.setObjField(cfgObj, field, value, true);
            }
        }
        catch (Exception e)
        {
            // 如果配置文件有问题，错误应该在前面已经出现，这里只记录错误，忽略。
            String err = "从配置文件初始化数据失败[getFromStore]。原因：" + e.getMessage();
            logger.error(err, e);
        }
    }

    public void setToStore(ConfigObj cfgObj) throws Exception
    {
        if (cfgObj == null)
            return;

        String cfgName = getCfgSessionName(cfgObj);
        Field[] fields = cfgObj.getClass().getFields();

        if (!hasIniData(cfgName))
        {
            m_ini.addSection(cfgName, null);
        }

        for (int i = 0; i < fields.length; i++)
        {
            Field field = fields[i];

            int mod = field.getModifiers();
            if ((!Modifier.isPublic(mod)) || Modifier.isFinal(mod) || Modifier.isStatic(mod))
                continue;

            Object valObj = field.get(cfgObj);

            String value = "";
            if (valObj != null)
                value = valObj.toString();

            // 是否要加密
            if (cfgObj.needEncrypt(field.getName()))
            {
                // 加密
                value = encryptString(value);
            }

            String key = field.getName();
            m_ini.setStringProperty(cfgName, key, value, cfgObj.getDescript(key));
        }
    }

    public void save() throws Exception
    {
        m_ini.save();
    }

    /**
     * 加密数据，如果配置对象有需要加密的配置项时会被调用
     * 
     * @param val
     * @return
     */
    abstract protected String encryptString(String val) throws Exception;

    /**
     * 解密数据，一般为方便手工修改配置文件，传入的数值也有可能是明文，建议处理这种情况
     * 
     * @param val
     * @return
     */
    abstract protected String decryptString(String val) throws Exception;

    protected boolean hasIniData(String objName)
    {
        String[] secs = m_ini.getAllSectionNames();
        for (int i = 0; i < secs.length; i++)
        {
            if (objName.equals(secs[i]))
                return true;
        }
        return false;
    }

    /**
     * 获取配置对象类在Ini文件中，对应的session名称，目前就是类名（除去所有包名）
     * 
     * @return
     */
    protected String getCfgSessionName(ConfigObj cfgObj)
    {
        String className = cfgObj.getClass().getName();
        return className.substring(className.lastIndexOf('.') + 1);
    }

}
