package com.credit.web.controller;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.concurrent.TimeUnit;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.credit.common.cache.CacheFactory;
import com.credit.common.cache.ICache;
import com.credit.common.exception.ServiceException;
import com.credit.common.result.ResultJson;
import com.credit.common.util.CollectionUtil;
import com.credit.common.util.RandomUtil;
import com.credit.common.util.servlet.RequestUtil;
import com.credit.common.util.time.TimeUtil;
import com.credit.entity.DunNumberCount;
import com.credit.entity.DunNumberDist;
import com.credit.entity.DunNumberQueryRecord;
import com.credit.entity.NumberTag;
import com.credit.service.DunNumberCountService;
import com.credit.service.DunNumberQueryRecordService;
import com.credit.service.DunNumberSearchHistoryService;
import com.credit.service.cache.DunNumberDistCache;
import com.credit.service.cache.NumberTagCache;
import com.credit.web.crawler.NumberTagCrawler;
import com.credit.web.model.DunNumberDistModel;
import com.credit.web.util.MatchPhoneUtil;
import com.google.common.collect.Lists;

/**
 * Created by wangjunling on 2017/3/21.
 */
@Controller
@RequestMapping("/dun")
public class DunYellowPageController extends AbstractBaseController
{
    @Resource
    private DunNumberCountService dunNumberCountService;

    @Resource
    private DunNumberQueryRecordService dunNumberQueryRecordService;

    @Resource
    private DunNumberSearchHistoryService dunNumberSearchHistoryService;

    @Value("${dun.query.max.times}")
    private Integer dunQueryMaxTimes;

    @Resource
    TaskExecutor asyncExecutor;

    @Value("${auth.file.path}")
    private String tempFilePath;

    @RequestMapping(value = "/index", method = RequestMethod.GET)
    public String index()
    {
        return "dun/index";
    }

    @RequestMapping(value = "/search", method = RequestMethod.GET)
    public String search()
    {
        return "dun/search";
    }

    @RequestMapping(value = "/m/index", method = RequestMethod.GET)
    public String mIndex()
    {
        return "dun/mobile/index";
    }

    @RequestMapping(value = "/query", method = RequestMethod.GET)
    @ResponseBody
    public ResultJson index(String phone, HttpServletRequest request)
    {
        if (StringUtils.isBlank(phone))
        {
            return new ResultJson().paramError();
        }
        try
        {
            String ip = RequestUtil.gettRequestIP(request);
            if (isFluentQuery(ip))
            {
                return new ResultJson().error(ResultJson.STATUS_CODE_FAIL, "频率过快，请稍后再试!");
            }
            NumberTag numberTag = NumberTagCache.getInstance().getNumberTagCacheData(phone);
            if (numberTag == null)
            {
                numberTag = NumberTagCrawler.searchNumberTag(phone);
            }
            dunNumberSearchHistoryService.saveSearchHistory(phone,ip,numberTag);
            if (numberTag == null)
            {
                return new ResultJson().noData();
            }
            return new ResultJson().success(numberTag);
        }
        catch (Exception e)
        {
            logger.error("获取numberTag异常", e);
            return new ResultJson().error();
        }

    }

    private static final ICache<String, Integer> ipCache = CacheFactory.getInstance()
            .newCache(1, TimeUnit.DAYS, 100000);

    private boolean isFluentQuery(String ip) throws Exception
    {
        Integer value = ipCache.get(ip);
        if (value != null)
        {
            if (value > dunQueryMaxTimes - 1)
            {
                return true;
            }
            else
            {
                ipCache.cache(ip, ++value);
                return false;
            }
        }
        ipCache.cache(ip, 1);
        return false;
    }

    @RequestMapping(value = "/count", method = RequestMethod.POST)
    @ResponseBody
    public ResultJson count()
    {
        try
        {
            List<DunNumberCount> numberCountList = dunNumberCountService.searchAll();
            Map<String, Object> result = new HashMap<>();
            for (DunNumberCount numberCount : numberCountList)
            {
                if (numberCount.getType().equals(DunNumberCount.FIND_COUNT))
                {
                    result.put(DunNumberCount.FIND_COUNT, numberCount.getCount());
                }
                if (numberCount.getType().equals(DunNumberCount.COVERAGE_COUNT))
                {
                    result.put(DunNumberCount.COVERAGE_COUNT, numberCount.getCount());
                }
            }
            return new ResultJson().success(result);
        }
        catch (Exception e)
        {
            logger.error("查询dunNumberCount异常", e);
            return new ResultJson().error();
        }
    }

    @RequestMapping(value = "/batch", method = RequestMethod.GET)
    public String batch()
    {
        return "dun/batch";
    }

    @RequestMapping(value = "/result", method = RequestMethod.GET)
    public String batchResult()
    {
        return "dun/result";
    }

    @RequestMapping(value = "/batch", method = RequestMethod.POST)
    @ResponseBody
    public ResultJson batch(HttpServletRequest request, ModelMap model)
    {
        int allowMaxSize = 30;
        int maxSize = 0;
        boolean isGreaterThanMaxSize = false;

        // 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession()
                .getServletContext());
        multipartResolver.setDefaultEncoding("utf-8");
        MultipartFile multipartFile;
        // 检查form中是否有enctype="multipart/form-data"

        if (!multipartResolver.isMultipart(request))
        {
            return new ResultJson().paramError("上传的文本文件为空");
        }
        // 将request变成多部分request
        MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
        // 获取multiRequest 中所有的文件名
        multipartFile = multiRequest.getFile("file");
        if (multipartFile == null)
        {
            return new ResultJson().paramError("上传的文本文件为空");
        }
        List<String> lineList;
        try
        {
            InputStream inputStream = multipartFile.getInputStream();
            // numberList = IOUtils.readLines(multipartFile.getInputStream());
            lineList = IOUtils.readLines(inputStream);
            if (CollectionUtil.isEmpty(lineList))
            {
                return new ResultJson().paramError("上传文件内容为空");
            }
        }
        catch (IOException e)
        {
            logger.error("读取文件异常", e);
            return new ResultJson().error();
        }
        List<String> numberList = MatchPhoneUtil.match(lineList);
        Set<String> numberSet = new TreeSet<>(numberList);
        List<NumberTag> numberTags = new ArrayList<>();
        NumberTagCache instance = NumberTagCache.getInstance();
        List<String> noFindList = new ArrayList<>();
        try
        {
            for (String s : numberSet)
            {
                NumberTag numberTag = instance.getNumberTagCacheData(s);
                if (numberTag == null)
                {
                    noFindList.add(s);
                    continue;
                }
                numberTag.setPhoneNumber(s);
                numberTags.add(numberTag);
            }

			List<NumberTag> tags = NumberTagCrawler.searchNumberTag(noFindList);
			if (tags != null && tags.size() > 0)
			{
				numberTags.addAll(tags);
			}
            if (numberTags.size() == 0)
            {
                return new ResultJson().noData();
            }
			maxSize = numberTags.size();

			if (numberTags.size() >= allowMaxSize)
			{
				isGreaterThanMaxSize = true;

				numberTags = numberTags.subList(0, allowMaxSize);
			}
            Map<String, Object> result = new HashMap<>();
            result.put("isGreaterThan", isGreaterThanMaxSize);
            result.put("resultList", numberTags);
            result.put("maxSize", maxSize);
            return new ResultJson().success(result);
        }
        catch (ServiceException e)
        {
            logger.error(e.getMessage(), e);
            return new ResultJson().error(e.getMessage());
        }
    }

    @RequestMapping(value = "/auth", method = RequestMethod.GET)
    public String auth()
    {
        return "dun/auth";
    }

    @RequestMapping(value = "/auth", method = RequestMethod.POST)
    @ResponseBody
    public ResultJson batch(String phone,String contactPhone, HttpServletRequest request)
    {
        if (StringUtils.isBlank(phone))
        {
            return new ResultJson().paramError("手机号不能为空");
        }
		if (StringUtils.isBlank(contactPhone))
		{
			return new ResultJson().paramError("联系方式不能为空");
		}
        // 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession()
                .getServletContext());
        multipartResolver.setDefaultEncoding("utf-8");
        MultipartFile multipartFile;
        // 检查form中是否有enctype="multipart/form-data"
        if (!multipartResolver.isMultipart(request))
        {
            return new ResultJson().paramError("授权文件为空");
        }
        // 将request变成多部分request
        MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
        // 获取multiRequest 中所有的文件名
        multipartFile = multiRequest.getFile("file");
        if (multipartFile == null)
        {
            return new ResultJson().paramError("授权文件为空");
        }
        String fileMd5;
        try
        {
            InputStream inputStream = multipartFile.getInputStream();
            fileMd5 = DigestUtils.md5Hex(inputStream);
        }
        catch (IOException e)
        {
            logger.error("文件读取异常", e);
            return new ResultJson().error("文件读取异常");
        }

        List<DunNumberQueryRecord> oldRecordList = dunNumberQueryRecordService.searchByFileMd5(fileMd5);
        String fileAbsolutePath;
        if (oldRecordList == null || oldRecordList.size() == 0)
        {

            Calendar calendar = Calendar.getInstance();
            String filePath = tempFilePath + calendar.get(Calendar.YEAR) + "/" + (calendar.get(Calendar.MONTH) + 1)
                    + "/" + calendar.get(Calendar.DAY_OF_MONTH);
            String suffix = multipartFile.getOriginalFilename().substring(
                    multipartFile.getOriginalFilename().lastIndexOf("."));
            String fileName = TimeUtil.format(calendar.getTime(), "yyyyMMddHHmmssSSS") + suffix;
            File destFile = new File(filePath);
            if (!destFile.exists())
            {
                boolean mkdirs = destFile.mkdirs();
            }
            try
            {
                File file = new File(destFile.getAbsolutePath() + "/" + fileName);
                multipartFile.transferTo(file);
                fileAbsolutePath = file.getAbsolutePath();
            }
            catch (IOException e)
            {
                logger.error("保存文件异常", e);
                return new ResultJson().error();
            }
        }
        else
        {
            fileAbsolutePath = oldRecordList.get(0).getAuthFile();
        }
        try
        {
            Date now = new Date();
            DunNumberQueryRecord record = new DunNumberQueryRecord();
            record.setAuthFile(fileAbsolutePath);
            record.setAuthStatus(0);
            record.setQueryPhone(phone);
            record.setContactPhone(contactPhone);
            record.setCreateDate(now);
            record.setUpdateDate(now);
            record.setFileMd5(fileMd5);
            dunNumberQueryRecordService.save(record);
        }
        catch (Exception e)
        {
            logger.error("保存提交信息异常", e);
            return new ResultJson().error();
        }
        return new ResultJson().success();
    }

    @RequestMapping(value = "/dist", method = RequestMethod.POST)
    @ResponseBody
    public ResultJson numberDistData()
    {
        final Integer MAX_ID = 930;
        final Integer MIN_ID= 1;
        final Integer SHOW_NUM= 40;
        ArrayList idList = new ArrayList<>(RandomUtil.genRandomNumber(MIN_ID, MAX_ID, SHOW_NUM));
        List<List<DunNumberDistModel>> dunNumberDistModelsTotal = null;
        try
        {
            List<DunNumberDist> dunNumberDists = DunNumberDistCache.getInstance().getDunNumberDist(idList);
            dunNumberDistModelsTotal = Lists.newArrayList();
            for (DunNumberDist dunNumberDist:dunNumberDists)
            {
                List<DunNumberDistModel> dunNumberDistModels = new ArrayList<>();
                DunNumberDistModel dunNumberDistModelFrom = new DunNumberDistModel();
                DunNumberDistModel dunNumberDistModelTo = new DunNumberDistModel();
                dunNumberDistModelTo.setName(dunNumberDist.getUserPhoneProvince());
                dunNumberDistModelTo.setValue(0);
                dunNumberDistModelFrom.setName(dunNumberDist.getCallFromProvince());
                dunNumberDistModelFrom.setValue(dunNumberDist.getFromProvinceNumber());
                dunNumberDistModels.add(dunNumberDistModelFrom);
                dunNumberDistModels.add(dunNumberDistModelTo);
                dunNumberDistModelsTotal.add(dunNumberDistModels);
            }
        } catch (ServiceException e)
        {
            logger.error("保存提交信息异常", e);
            return new ResultJson().error();
        }
        return new ResultJson().success(dunNumberDistModelsTotal);
    }

    @RequestMapping(value = "/dist", method = RequestMethod.GET)
    public String numberDist()
    {
        return "dun/dist";
    }

}
